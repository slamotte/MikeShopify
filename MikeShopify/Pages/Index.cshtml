@page
@using Utilities.Extensions
@model IndexModel
@{
    ViewData["Title"] = "Mike's Shopify Stock Option Values";
}

<h1>@ViewData["Title"]</h1>

<h4>Assumptions</h4>
<ul>
    <li>Original Share Price: @Model.OriginalPrice.FormatCurrency()</li>
    <li>Current Share Price: @Model.CurrentPrice.FormatCurrency()</li>
    <li>Share Count: @Model.ShareCount</li>
</ul>

<h4>
    Original Value: @Model.OriginalValue.FormatCurrency()<br />
    Current Value: @Model.CurrentValue.FormatCurrency()<br />
    <strong>Difference in Value: @Model.Difference.FormatCurrency()</strong>
</h4>

<h3>History</h3>

<canvas id="historyChart" width="100%" height="35%"></canvas>

@section Scripts
    {
    <script>

        const data = GetData();
        const historyContext = document.getElementById("historyChart").getContext('2d');
        const historyChart = new Chart(historyContext,
            {
                type: 'line',
                data: {
                    labels: data.map(i => i.time),
                    datasets: [
                        {
                            label: "Difference in Value",
                            data: data.map(i => i.valueDifference),
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    elements: {
                        line: {
                            tension: 0
                        }
                    },
                    tooltips: {
                        callbacks: {
                            afterLabel: function(tooltipItem) {
                                const price = data[tooltipItem["index"]].price;
                                return `Share Price: $${Number(price).format(2)}`;
                                },
                                label: function(tooltipItem) {
                                    return `Difference: $${Number(tooltipItem.yLabel).format(2)}`;
                            }
                        }
                    },
                    scales: {
                        yAxes: [
                            {
                                ticks: {
                                    callback: function(label) {
                                        return `$${Number(label).format()}`;
                                    }
                                }
                            }
                        ]
                    }
                }
            });

        function GetData() {
            return [
                @foreach (var price in Model.PriceHistory)
                {
                    <text>
                        {
                            time: "@price.Time.FormatTimestamp()",
                            price: @Math.Round(price.Price, 2),
                            valueDifference: @Math.Round(Model.ValueDifference(price), 2)
                            // ReSharper disable once ElidedTrailingElement
                        },
                    </text>
                }
            ];
        }

    </script>
}
